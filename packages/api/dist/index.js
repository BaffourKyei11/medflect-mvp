import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import http from 'http';
import { Server as IOServer } from 'socket.io';
import { firebaseInit } from './services/firebase.js';
import { authRouter } from './routes/auth.js';
import { fhirRouter } from './routes/fhir.js';
import { aiRouter } from './routes/ai.js';
import { consentRouter } from './routes/consent.js';
import { healthRouter } from './routes/health.js';
import { errorHandler } from './middleware/error.js';
import { requireAuth } from './middleware/auth.js';
import { analyticsRouter } from './routes/analytics.js';
import { dashboardRouter } from './routes/dashboard.js';
const app = express();
const server = http.createServer(app);
const io = new IOServer(server, { cors: { origin: process.env.CORS_ORIGIN || '*' } });
app.set('io', io);
app.use(helmet());
app.use(cors({ origin: process.env.CORS_ORIGIN || '*', credentials: true }));
app.use(express.json({ limit: '10mb' }));
app.use(morgan('dev'));
app.use('/api/health', healthRouter);
app.use('/api/auth', authRouter);
app.use('/api/analytics', analyticsRouter);
app.use('/api/dashboard', dashboardRouter);
app.use('/api/fhir', requireAuth, fhirRouter);
app.use('/api/ai', requireAuth, aiRouter);
app.use('/api/consent', requireAuth, consentRouter);
app.use(errorHandler);
const PORT = Number(process.env.PORT || 3001);
(async () => {
    firebaseInit();
    server.listen(PORT, () => console.log(`API listening on :${PORT}`));
})();
