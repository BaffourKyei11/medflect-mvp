version: '3.8'

services:
  # Medflect AI Application
  medflect-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: medflect-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=./data/medflect.db
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=groq/deepseek-r1-distill-llama-70b
      - GROQ_BASE_URL=${GROQ_BASE_URL:-http://91.108.112.45:4000}
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - HOSPITAL_ID=37_military_hospital
      - HOSPITAL_NAME=37 Military Hospital
      - HOSPITAL_LOCATION=Accra, Ghana
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      # Rate limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      # Circuit breaker and timeouts
      - CB_FAILURE_THRESHOLD=${CB_FAILURE_THRESHOLD:-5}
      - CB_RESET_MS=${CB_RESET_MS:-30000}
      - AI_UPSTREAM_TIMEOUT_MS=${AI_UPSTREAM_TIMEOUT_MS:-20000}
      - REQUEST_TIMEOUT_MS=${REQUEST_TIMEOUT_MS:-30000}
      - HEADERS_TIMEOUT_MS=${HEADERS_TIMEOUT_MS:-35000}
      # Redis connection for BullMQ
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-medflect123}
    volumes:
      - medflect_data:/app/data
      - medflect_logs:/app/logs
      - medflect_uploads:/app/uploads
    depends_on:
      - redis
    networks:
      - medflect-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: medflect-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medflect-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-medflect123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: medflect-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - medflect-app
    networks:
      - medflect-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://medflect-app:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: medflect-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=medflect
      - POSTGRES_USER=medflect
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-medflect123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - medflect-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medflect -d medflect"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: medflect-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - medflect-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: medflect-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - medflect-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: medflect-backup
    restart: "no"
    volumes:
      - medflect_data:/data:ro
      - postgres_data:/postgres:ro
      - ./backups:/backups
    environment:
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: |
      sh -c "
        apk add --no-cache postgresql-client aws-cli
        echo 'Starting backup...'
        pg_dump -h postgres -U medflect -d medflect > /backups/db_$(date +%Y%m%d_%H%M%S).sql
        tar -czf /backups/data_$(date +%Y%m%d_%H%M%S).tar.gz -C /data .
        if [ ! -z \"$$BACKUP_S3_BUCKET\" ]; then
          aws s3 sync /backups s3://$$BACKUP_S3_BUCKET/medflect-backups/
        fi
        echo 'Backup completed'
      "
    depends_on:
      - postgres
    networks:
      - medflect-network

volumes:
  medflect_data:
    driver: local
  medflect_logs:
    driver: local
  medflect_uploads:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  medflect-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 